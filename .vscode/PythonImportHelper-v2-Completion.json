[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "agno.agent",
        "description": "agno.agent",
        "isExtraImport": true,
        "detail": "agno.agent",
        "documentation": {}
    },
    {
        "label": "Agent",
        "importPath": "agno.agent",
        "description": "agno.agent",
        "isExtraImport": true,
        "detail": "agno.agent",
        "documentation": {}
    },
    {
        "label": "OpenAIChat",
        "importPath": "agno.models.openai",
        "description": "agno.models.openai",
        "isExtraImport": true,
        "detail": "agno.models.openai",
        "documentation": {}
    },
    {
        "label": "WebCrawlerTool",
        "importPath": "tool",
        "description": "tool",
        "isExtraImport": true,
        "detail": "tool",
        "documentation": {}
    },
    {
        "label": "WebCrawlerTool",
        "importPath": "tool",
        "description": "tool",
        "isExtraImport": true,
        "detail": "tool",
        "documentation": {}
    },
    {
        "label": "ReasoningTools",
        "importPath": "agno.tools.reasoning",
        "description": "agno.tools.reasoning",
        "isExtraImport": true,
        "detail": "agno.tools.reasoning",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "RunEvent",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "RunResponse",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "RunEvent",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "RunResponse",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "RunResponse",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "RunEvent",
        "importPath": "agno.run.response",
        "description": "agno.run.response",
        "isExtraImport": true,
        "detail": "agno.run.response",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ExaTools",
        "importPath": "agno.tools.exa",
        "description": "agno.tools.exa",
        "isExtraImport": true,
        "detail": "agno.tools.exa",
        "documentation": {}
    },
    {
        "label": "MongoDbStorage",
        "importPath": "agno.storage.mongodb",
        "description": "agno.storage.mongodb",
        "isExtraImport": true,
        "detail": "agno.storage.mongodb",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_web_support_agent",
        "importPath": "agent",
        "description": "agent",
        "isExtraImport": true,
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "simple_process_stream",
        "importPath": "simple_processor",
        "description": "simple_processor",
        "isExtraImport": true,
        "detail": "simple_processor",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CrawlerRunConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "AsyncWebCrawler",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CrawlerRunConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "BrowserConfig",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "CacheMode",
        "importPath": "crawl4ai",
        "description": "crawl4ai",
        "isExtraImport": true,
        "detail": "crawl4ai",
        "documentation": {}
    },
    {
        "label": "PDFCrawlerStrategy",
        "importPath": "crawl4ai.processors.pdf",
        "description": "crawl4ai.processors.pdf",
        "isExtraImport": true,
        "detail": "crawl4ai.processors.pdf",
        "documentation": {}
    },
    {
        "label": "PDFContentScrapingStrategy",
        "importPath": "crawl4ai.processors.pdf",
        "description": "crawl4ai.processors.pdf",
        "isExtraImport": true,
        "detail": "crawl4ai.processors.pdf",
        "documentation": {}
    },
    {
        "label": "PDFCrawlerStrategy",
        "importPath": "crawl4ai.processors.pdf",
        "description": "crawl4ai.processors.pdf",
        "isExtraImport": true,
        "detail": "crawl4ai.processors.pdf",
        "documentation": {}
    },
    {
        "label": "PDFContentScrapingStrategy",
        "importPath": "crawl4ai.processors.pdf",
        "description": "crawl4ai.processors.pdf",
        "isExtraImport": true,
        "detail": "crawl4ai.processors.pdf",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Toolkit",
        "importPath": "agno.tools",
        "description": "agno.tools",
        "isExtraImport": true,
        "detail": "agno.tools",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ask-ai\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ask-ai\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ask-ai\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ask-ai\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ask-ai\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "create_web_support_agent",
        "kind": 2,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "def create_web_support_agent(\n    starting_urls: List, company_name: str, api_key: str = None, storage=storage, session_id: str = None\n) -> Agent:\n    \"\"\"Create a web support agent with data retrieval capabilities.\"\"\"\n    # Create the crawler tool - it will automatically extract allowed domains from starting URLs\n    crawler_tool = WebCrawlerTool(starting_urls=starting_urls)\n    # Use provided API key or fallback to environment variable\n    api_key = api_key or os.getenv('OPENAI_API_KEY')\n    # Create agent with intelligent instructions\n    agent = Agent(",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "storage",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "storage = MongoDbStorage(\n    # store sessions in the agent_sessions collection\n    collection_name=\"agent_sessions\",\n    db_url=os.getenv(\"MONGODB_URL\"),\n    db_name=os.getenv(\"MONGODB_DB\"),\n)\ndef create_web_support_agent(\n    starting_urls: List, company_name: str, api_key: str = None, storage=storage, session_id: str = None\n) -> Agent:\n    \"\"\"Create a web support agent with data retrieval capabilities.\"\"\"",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "ChatRequest",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class ChatRequest(BaseModel):\n    urls: List[str]\n    query: str\n    session_id: str\n    company_name: str\n    api_key: str\nasync def stream_chat_response(\n    query: str,\n    agent: Agent,\n) -> AsyncGenerator:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter(tags=[\"chat_agents\"])\n# Request Schema\nclass ChatRequest(BaseModel):\n    urls: List[str]\n    query: str\n    session_id: str\n    company_name: str\n    api_key: str\nasync def stream_chat_response(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "router = APIRouter(tags=[\"chat_agents\"])\n# Request Schema\nclass ChatRequest(BaseModel):\n    urls: List[str]\n    query: str\n    session_id: str\n    company_name: str\n    api_key: str\nasync def stream_chat_response(\n    query: str,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = FastAPI(\n    title=\"AI Chat Widget API\",\n    description=\"Streaming AI chat API for website integration\",\n    version=\"1.0.0\"\n)\n# Add CORS middleware for cross-origin requests (essential for widget embedding)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allow all origins for widget embedding\n    allow_credentials=True,",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "simple_processor",
        "description": "simple_processor",
        "peekOfCode": "logger = logging.getLogger(__name__)\nasync def simple_process_stream(\n    raw_stream: AsyncGenerator,\n) -> AsyncGenerator[str, None]:\n    \"\"\"\n    🍌 BANANA PROCESSOR - Now with REAL CONTENT EXTRACTION + NO REPETITION!\n    \"\"\"\n    try:\n        logger.info(\"🍌 BANANA PROCESSOR ACTIVATED - EXTRACTING REAL CONTENT!\")\n        content_buffer = \"\"",
        "detail": "simple_processor",
        "documentation": {}
    },
    {
        "label": "test_single_pdf",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def test_single_pdf():\n    \"\"\"Test processing a single PDF URL.\"\"\"\n    print(\"=\" * 60)\n    print(\"TEST 1: Processing a single PDF URL\")\n    print(\"=\" * 60)\n    # Initialize the WebCrawlerTool\n    tool = WebCrawlerTool()\n    # Test with a single PDF URL (arXiv paper)\n    pdf_url = \"https://arxiv.org/pdf/2310.06825.pdf\"\n    print(f\"Processing PDF: {pdf_url}\")",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "test_multiple_pdfs",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def test_multiple_pdfs():\n    \"\"\"Test processing multiple PDF URLs.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"TEST 2: Processing multiple PDF URLs\")\n    print(\"=\" * 60)\n    # Initialize the WebCrawlerTool\n    tool = WebCrawlerTool()\n    # Test with multiple PDF URLs\n    pdf_urls = [\n        \"https://arxiv.org/pdf/2310.06825.pdf\",  # Machine Learning paper",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "test_invalid_pdf_url",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def test_invalid_pdf_url():\n    \"\"\"Test handling of invalid PDF URLs.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"TEST 3: Testing invalid PDF URL handling\")\n    print(\"=\" * 60)\n    # Initialize the WebCrawlerTool\n    tool = WebCrawlerTool()\n    # Test with non-PDF URLs\n    invalid_urls = [\n        \"https://example.com/not-a-pdf.html\",",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "test_mixed_urls",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def test_mixed_urls():\n    \"\"\"Test processing a mix of valid and invalid PDF URLs.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"TEST 4: Testing mixed valid/invalid PDF URLs\")\n    print(\"=\" * 60)\n    # Initialize the WebCrawlerTool\n    tool = WebCrawlerTool()\n    # Mix of valid and invalid URLs\n    mixed_urls = [\n        \"https://arxiv.org/pdf/2310.06825.pdf\",  # Valid PDF",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "test_pdf_url_validation",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def test_pdf_url_validation():\n    \"\"\"Test the PDF URL validation function.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"TEST 5: Testing PDF URL validation\")\n    print(\"=\" * 60)\n    # Initialize the WebCrawlerTool\n    tool = WebCrawlerTool()\n    # Test various URL patterns\n    test_urls = [\n        \"https://example.com/document.pdf\",  # Should be valid",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_pdf_tool",
        "description": "test_pdf_tool",
        "peekOfCode": "def main():\n    \"\"\"Run all PDF processing tests.\"\"\"\n    print(\"🔬 Testing PDF Processing Capabilities of WebCrawlerTool\")\n    print(\"=\" * 80)\n    try:\n        # Run validation test first (doesn't require network)\n        test_pdf_url_validation()\n        # Run network-dependent tests\n        test_single_pdf()\n        test_multiple_pdfs()",
        "detail": "test_pdf_tool",
        "documentation": {}
    },
    {
        "label": "WebCrawlerTool",
        "kind": 6,
        "importPath": "tool",
        "description": "tool",
        "peekOfCode": "class WebCrawlerTool(Toolkit):\n    \"\"\"Simple web crawler tool that returns content and links for agent decision making.\"\"\"\n    def __init__(self, starting_urls: List[str] = None, max_links_per_page: int = 50):\n        super().__init__()\n        self.starting_urls = starting_urls or []\n        self.allowed_domains = self._extract_domains_from_urls(self.starting_urls)\n        self.max_links_per_page = max_links_per_page\n        self.register(self.crawl_selected_urls)\n        self.register(self.process_pdf_urls)\n    def _extract_domains_from_urls(self, urls: List[str]) -> List[str]:",
        "detail": "tool",
        "documentation": {}
    }
]